* Use-pkg
  #+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
  (global-display-line-numbers-mode)
  #+END_SRC
*  Battery and Time
#+BEGIN_SRC emacs-lisp
(setq display-time-default-load-average nil)
(display-battery-mode 1)
#+END_SRC
*  Set yes no to y n
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*  Remove startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
*  Remove scroll-tool-menu bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

* Package Whichkey
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC
* Orgmode bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
#+END_SRC
* Ido Mode
#+BEGIN_SRC emacs-lisp
;; ido for suggestions
;;(setq ido-everywhere t)
;;(setq ido-enable-flex-matching t)
;;(ido-mode t)

#+END_SRC
* modeline
;;#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
(setq doom-modeline-project-detection 'auto)
(setq doom-modeline-buffer-file-name-style 'auto)
(setq doom-modeline-icon (display-graphic-p))
(setq doom-modeline-major-mode-icon t)
(setq doom-modeline-major-mode-color-icon t)
(setq doom-modeline-buffer-state-icon t)
(setq doom-modeline-buffer-modification-icon t)
(setq doom-modeline-workspace-name t)
(setq doom-modeline-persp-name t)
(setq doom-modeline-persp-icon t)
;;#+END_SRC
* Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC
* Autocompletion
#+BEGIN_SRC emacs-lisp
;;(use-package auto-complete
;;  :ensure t
;;  :init
;;  (progn
;;    (ac-config-default)
;;    (global-auto-complete-mode t)))

#+END_SRC
* Company Mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
*  Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (progn
    (setq dashboard-center-content t)
    (setq dashboard-startup-banner "~/Downloads/l.png")
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title " Remember VIM Is Always Better  ")
    (setq dashboard-set-heading-icon t))
  :config
  (dashboard-setup-startup-hook))
	  
#+END_SRC
*  Package Auto-Updater
#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :ensure t
  :config
  (auto-package-update-maybe))

#+END_SRC
*  Expand Region(Selection)
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind
  ("C-=" . er/expand-region)
  ("C--" . er/contract-region))

#+END_SRC
*  Treemacs (File Browser)
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :bind
  (:map global-map
       ([f8] . treemacs))
  :config
  (setq treemacs-is-never-other-window t))
#+END_SRC

*  Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (define-key projectile-mode-map (kbd "C-x p") 'Projectile-command-map)
  (projectile-mode +1))
#+END_SRC

* Treemacs Projectile
#+BEGIN_SRC emacs-lisp

(use-package treemacs-projectile
  :ensure t)
#+END_SRC

* Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t
:init
(progn
(global-set-key [remap other-window] 'ace-window)
(custom-set-faces
'(aw-leading-char-face
((t (:inherit ace-jump-face-foreground :height 3.0)))))
))
#+END_SRC
* Winner mode
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
* Fly check
#+BEGIN_SRC emacs-lisp
(use-package flycheck
:ensure t
:init
(global-flycheck-mode t))
#+END_SRC

* Avy Search
#+BEGIN_SRC emacs-lisp
(use-package avy
:ensure t
:bind ("M-s" . avy-goto-char))
#+END_SRC


* Swiper
;;  #+BEGIN_SRC emacs-lisp

  (use-package counsel
:ensure t
)

(use-package swiper
:ensure try
:config
(progn
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-load-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
))



;; Ivy POsframe

(use-package ivy-posframe)
(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
(ivy-posframe-mode 1)

;; Marginalia

(use-package marginalia)
(marginalia-mode +1)


;;  #+END_SRC

* Keycast
  #+BEGIN_SRC emacs-lisp
  (use-package keycast
  :config
  
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line."
    :global t
    (if keycast-mode
	(add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))
  (add-to-list 'global-mode-string '("" mode-line-keycast " "))
  (keycast-mode))

  #+END_SRC

* Treemacs icons
  #+BEGIN_SRC emacs-lisp
  (use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)
  
  #+END_SRC

* Python
;;;  #+BEGIN_SRC  emacs-lisp
  (use-package better-defaults
  :ensure t)
  (use-package elpy
  :ensure t)
  (elpy-enable)
  (when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

  (use-package py-autopep8
  :ensure t)
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
;;; #+END_SRC
  
* Theme

  #+BEGIN_SRC emacs-lisp
    (use-package exotica-theme
     :ensure t)

  #+END_SRC

* Modeline
  #+BEGIN_SRC emacs-lisp
		(use-package moody
		    :config
		    (setq x-underline-at-descent-line t)
		    (moody-replace-mode-line-buffer-identification)
		    (moody-replace-vc-mode))
		(use-package minions
		    :config
		    (setq minions-mode-line-lighter ""
					    minions-mode-line-delimiters '("" . ""))
		    (minions-mode 1))
	    (global-hl-line-mode)
	(use-package diff-hl
		:config
		(add-hook 'prog-mode-hook 'turn-on-diff-hl-mode))
    (setq frame-title-format
			    '((:eval (if (buffer-file-name)
									     (abbreviate-file-name (buffer-file-name))
								     "%b"))))

#+END_SRC
* Org Reveal
#+BEGIN_SRC emacs-lisp
      (use-package ox-reveal
	:ensure t)
      (setq  org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
      (use-package htmlize
	:ensure t)
#+END_SRC
* Org-roam
  #+BEGIN_SRC emacs-lisp
  (use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/orgroam"))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
(setq org-roam-v2-ack t)
  #+END_SRC
* Startup
  #+BEGIN_SRC emacs-lisp
  ;; Improve Start

;; Using garbage magic hack.
 (use-package gcmh
   :config
   (gcmh-mode 1))
;; Setting garbage collection threshold
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

   #+END_SRC
* Vertico
  #+BEGIN_SRC emacs-lisp
	  (use-package vertico
	  :init
	  (vertico-mode))
	  (setq vertico-resize t)
	  (setq vertico-cycle t)
	  (use-package orderless
	  :init
	  ;; Configure a custom style dispatcher (see the Consult wiki)
	  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
	  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
	  (setq completion-styles '(orderless)
		completion-category-defaults nil
		completion-category-overrides '((file (styles partial-completion)))))

	;; Persist history over Emacs restarts. Vertico sorts by history position.
	(use-package savehist
	  :init
	  (savehist-mode))

	;; A few more useful configurations...
	(use-package emacs
	  :init
	  ;; Add prompt indicator to `completing-read-multiple'.
	  ;; Alternatively try `consult-completing-read-multiple'.
	  (defun crm-indicator (args)
	    (cons (concat "[CRM] " (car args)) (cdr args)))
	  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	  ;; Do not allow the cursor in the minibuffer prompt
	  (setq minibuffer-prompt-properties
		'(read-only t cursor-intangible t face minibuffer-prompt))
	  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
	  ;; Vertico commands are hidden in normal buffers.
	  ;; (setq read-extended-command-predicate
	  ;;       #'command-completion-default-include-p)

	  ;; Enable recursive minibuffers
	  (setq enable-recursive-minibuffers t))

	(define-key vertico-map "?" #'minibuffer-completion-help)
	(define-key vertico-map (kbd "M-RET") #'minibuffer-force-complete-and-exit)
	(define-key vertico-map (kbd "M-TAB") #'minibuffer-complete)

	(setq completion-styles '(substring orderless))

	(setq completion-styles '(basic substring partial-completion flex))

	(setq read-file-name-completion-ignore-case t
	      read-buffer-completion-ignore-case t
	      completion-ignore-case t)

      
	(setq completion-in-region-function
	      (lambda (&rest args)
		(apply (if vertico-mode
			   #'consult-completion-in-region
			 #'completion--in-region)
		       args)))

	(advice-add #'completing-read-multiple
		    :override #'consult-completing-read-multiple)

	(use-package vertico-posframe)
	(vertico-posframe-mode 1)

    (use-package marginalia)
    (marginalia-mode +1)

#+END_SRC
